using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using TradesWebApplication.DAL.EFModels;

namespace TradesWebApplication.DAL
{
    public class UnitOfWork : IDisposable
    {
        private TradesContext context = new TradesContext();
        //for view models
        private GenericRepository<Trade_Line> tradeLineRepository;
        private GenericRepository<Trade_Line_Group> tradeLineGroupRepository;
        private GenericRepository<Trade_Line_Group_Type> tradeLineGroupTypeRepository;
        //for view
        private GenericRepository<Service> serviceRepository;
        private GenericRepository<Relativity> relativityRepository;
        private GenericRepository<Benchmark> benchmarkRepository;
        private GenericRepository<Length_Type> lengthTypeRepository;
        private GenericRepository<Currency> currencyRepository;
        private GenericRepository<Hedge_Type> hedgeTypeRepository;
        private GenericRepository<Measure_Type> measureTypeRepository;
        private GenericRepository<Instruction_Type> instructionTypeRepository;
        private GenericRepository<Structure_Type> structureTypeRepository;
        //rest of tables
        private GenericRepository<Location> locationRepository;
        private GenericRepository<Tradable_Thing> tradableThingRepository;
        private GenericRepository<Tradable_Thing_Class> tradableThingClassRepository;
        private GenericRepository<Position> positionRepository;
        private GenericRepository<Status> statusRepository;
        private GenericRepository<Trade_Comment> tradeCommentRepository;
        private GenericRepository<Track_Record> trackRecordRepository;
        private GenericRepository<Track_Record_Type> trackRecordTypeRepository;
        private GenericRepository<Trade_Performance> tradePerformanceRepository;
        private GenericRepository<Trade_Instruction> tradeInstructionRepository;
        //Related Trade
        private GenericRepository<Related_Trade> relatedTradeTypeRepository;



        public GenericRepository<Trade_Line> TradeLineRepository
        {
            get
            {

                if (this.tradeLineRepository == null)
                {
                    this.tradeLineRepository = new GenericRepository<Trade_Line>(context);
                }
                return tradeLineRepository;
            }
        }

        public GenericRepository<Trade_Line_Group> TradeLineGroupRepository
        {
            get
            {

                if (this.tradeLineGroupRepository == null)
                {
                    this.tradeLineGroupRepository = new GenericRepository<Trade_Line_Group>(context);
                }
                return tradeLineGroupRepository;
            }
        }

        public GenericRepository<Trade_Line_Group_Type> TradeLineGroupTypeRepository
        {
            get
            {

                if (this.tradeLineGroupTypeRepository == null)
                {
                    this.tradeLineGroupTypeRepository = new GenericRepository<Trade_Line_Group_Type>(context);
                }
                return tradeLineGroupTypeRepository;
            }
        }

        public void Save()
        {
            context.SaveChanges();
        }

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}