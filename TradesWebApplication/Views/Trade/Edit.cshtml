@model TradesWebApplication.ViewModels.TradesViewModel
@using Newtonsoft.Json
@using TradesWebApplication.DAL.EFModels

@{
    ViewBag.Title = "Trade Edit Update";
    var jsModel = JsonConvert.SerializeObject(Model, Formatting.Indented,
        new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
}

<form role="form" class="form-horizontal" data-bind="submit: function () { saveTrade(); }">
    @Html.ValidationSummary(true)
    <fieldset class="tgroup">
        <legend class="trade_group_head"><strong>Trade Edit</strong></legend>

         <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.service_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.service_id, new SelectList(Model.Services, "service_id", "service_code"), "{Service}", new { @data_bind = "value: service_id", @class = "form-control col-xs-2" })
<span class="validationMessage" data-bind="validationMessage: service_id"></span>
            </div>


        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.length_type_id)
            </div>


            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.length_type_id, new SelectList(Model.LengthTypes, "length_type_id", "length_type_label"), "{Trade Type}", new { @data_bind = "value: length_type_id", @class = "form-control col-xs-2" })
<span class="validationMessage" data-bind="validationMessage: length_type_id"></span>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.relativity_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.relativity_id, new SelectList(Model.Relativitys, "relativity_id", "relativity_label"), "{Benchmark}", new { @data_bind = "value: relativity_id", @class = "form-control form-control col-xs-2", @id = "relativityId" })
                        <span class="validationMessage" data-bind="validationMessage: relativity_id"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3" data-bind="visible: relativity_id() == 2">
                @Html.LabelFor(model => model.benchmark_id)
            </div>

            <div class="col-sm-3" data-bind="visible: relativity_id() == 2">
                <input class="input-xlarge" id="BenchmarkTypeAhead" type="hidden" data-bind="value: benchmark_id" />
<span class="validationMessage" data-bind="validationMessage: benchmark_id"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.created_on)
            </div>

            <div  class="col-sm-3">
                @Html.TextBoxFor(model => model.created_on, new { @class = "form-control input-xlarge", @disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_label)
            </div>

            <div class="col-sm-3">
                <input type="text" class="form-control input-xlarge" data-bind="value: trade_label" placeholder="{Canonical Label}" disabled="disabled" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_editorial_label)
            </div>

            <div class="col-sm-3">
                <input type="text" class="form-control input-xlarge" data-bind="value: trade_editorial_label" placeholder="{Editorial Label}" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.structure_type_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.structure_type_id, new SelectList(Model.StructureTypes, "structure_type_id", "structure_type_label"), String.Empty, new { @data_bind = "value: structure_type_id", @class = "form-control" })
<span class="validationMessage" data-bind="validationMessage: structure_type_id"></span>
            </div>
        </div>

        
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.status)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.status, new SelectList(Model.Status, "status_id", "status_label"), new { @data_bind = "value: status", @class = "form-control"})
                </div>
</div>

        <!-- trade groups ------------------------------------->
        <fieldset class="tgroup">
            <legend class="trade_group">Group Information</legend>
            <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradegroups'>
                <li>
                    <div class="well col-xs-12" style="margin-bottom: 10px; padding-bottom: 0px; padding-top: 0px">
                        <div class="col-md-12">
                            <div class="row">
                                <h3><strong><span>Group </span><span data-bind='text: ($index() + 1)'></span><span> Information</span></strong></h3>
                            </div>
                            <div class="row">
                                <br />
                            </div>
                        </div>
                        <div class="row">
                            <div class="control-group col-md-3">
                                <div class="row col-md-12">
                                    <strong><span>Group Structure:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    @Html.DropDownListFor(x => x.trade_line_group_type_id, new SelectList(Model.TradeLineGroupTypes, "trade_line_group_type_id", "trade_line_group_type_label"), "{Structure}", new { @data_bind = "value: trade_line_group_type_id, selectedText: trade_line_group_type_string", @class="form-control" })
<span class="validationMessage" data-bind="validationMessage: trade_line_group_type_id"></span> 
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Editorial Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_editorial_label" placeholder="{Editorial Label}" />
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Canonical Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_label" placeholder="{Canonical Label}" disabled="disabled" />
                                </div>
                            </div>
                            <div class="form-group col-md-9">
                                <div class="well col-xs-12">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <h4><strong>Trade Line(s)</strong></h4>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <br />
                                    </div>
                                    <div class="row">
                                        <div class="col-md-1">
                                            <strong><span>Order:</span></strong>
                                        </div>
                                        <div class="col-md-4">
                                            <strong><span>Position:</span></strong>
                                        </div>
                                        <div class="col-md-7">
                                            <strong><span>Financial Instrument:</span></strong>
                                        </div>
                                    </div>
                                    <!-- Add a list of trade lines. -->
                                    <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradeLines'>
                                        <li>
                                            <div class="row">
                                                <div class="col-md-1 center-block">
                                                    

                                                        <label class="control-label" data-bind='text: ($index() + 1)'></label>
                                               
                                                </div>
                                                <div class="col-md-4">
                                                                                                      <input type="hidden" data-bind="uniqueIdPosition: position_id, value: position_id" class="tradeLinePosition" />

<span class="validationMessage" data-bind="validationMessage: position_id"></span> 
                                                </div>
                                                <div class="col-md-6">
                                                                                                        <input type="hidden" data-bind="uniqueIdTradableThing: tradable_thing_id, value: tradable_thing_id" class="tradeLineTradeableThing" />

<span class="validationMessage" data-bind="validationMessage: tradable_thing_id"></span> 
                                                </div>
                                                <div class="col-md-1">
                                                    <button type="button" class="btn btn-sm btn-danger" data-bind='click: function () { $parent.removeLine($data); }'>
                                                        <span class="glyphicon glyphicon-remove-circle"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </li>
                                        
                                    </ul>
                                    <div class="row">
<div class="pull-left">
 <br />
                                <button data-bind='click: $root.removeGroup' class='btn btn-sm btn-danger'>Delete trade group</button>
                            </div>
                                            <div class="pull-right">
                                                <br />
                                                <button id="btnAddLine" data-bind='click: function () { addLine(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new trade line</button>
                                             </div>
                                    </div>
                                </div>
                                <!-- tradeline row -->
                            </div>
                            <!-- tradeline well -->
                            
                        </div>
                        <!-- group row -->
                    </div>
                    <!-- group well-->
                </li>
            </ul>
<div class="row">
    <div class="col-xs-3 pull-right">
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button id="btnAddGroup" data-bind='click: function () { addGroup(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new group</button>   
</div>
</div>

        </fieldset>

        <!-- instructions ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Instructions</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry)
                </div>
                <div class="col-sm-3">
                    <input type="text" class="form-control input-xlarge" data-bind="value: instruction_entry" disabled="disabled"/>
<span class="validationMessage" data-bind="validationMessage: instruction_entry"></span>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry_date)
                </div>
                <div class="col-sm-3">
                    <div class="input-append date" id="dpInstructionEntry" data-datepicker-format="YYYY-MM-DD">
                        <input class="span2" size="20" type="text" data-bind="value: instruction_entry_date, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }" disabled="disabled">
                        <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                  <span class="validationMessage" data-bind="validationMessage: instruction_entry_date"></span>
                    </div>  
  </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit)
                </div>
                <div class="col-sm-3">
                    <input class="form-control input-xlarge" type="text" data-bind="value: instruction_exit" disabled="disabled"/>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit_date)
                </div>
 <div class="col-sm-3">
                <div class="input-append date" id="dpInstructionExit" data-date="" data-datepicker-format="YYYY-MM-DD">
<input class="span2" size="20" type="text" data-bind="value: instruction_exit_date, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }" disabled="disabled">
                    <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>
                    <span data-bind="visible: instructionDateCheck() == false" class="validationMessage">This field must be greater than instruction entry date.</span>
                </div>
</div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_type_id)
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.instruction_type_id, new SelectList(Model.InstructionTypes, "instruction_type_id", "instruction_type_label"), new { @data_bind = "value: instruction_type_id", @class = "form-control", @disabled="disabled" })
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: instruction_label" disabled="disabled"/>

                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.hedge_id)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.hedge_id, new SelectList(Model.HedgeTypes, "hedge_id", "hedge_label"), new { @data_bind = "value: hedge_id", @class = "form-control", @disabled="disabled" })
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.currency_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="CurrencyTypeAhead" type="hidden" data-bind="value: currency_id" disabled="disabled"/>
                </div>
            </div>

        </fieldset>

        <!-- supplementary info ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Supplementary Information</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.related_trade_ids)
                </div>
                 <div class="col-sm-6">
                      <input class="input-xlarge" id="selectRelatedTrades" type="hidden" data-bind="value: related_trade_ids_list" />
                </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-3">
                        @Html.LabelFor(model => model.apl_func)
                    </div>
                    <div class="col-sm-7">
                        <input type="text" class="input-xlarge form-control" data-bind="value: apl_func" maxlength="255"/>
                    </div>
                </div>
        </fieldset>
        <!-- FX Spot and Carry ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">FX Spot and Carry</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.mark_to_mark_rate)
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: mark_to_mark_rate" disabled="disabled"/>
                    <span class="validationMessage" data-bind="validationMessage: mark_to_mark_rate"></span>  
                </div>
               
            </div>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.interest_rate_diff)
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: interest_rate_diff" disabled="disabled"/>
                    <span class="validationMessage" data-bind="validationMessage: interest_rate_diff"></span> 
                </div>
               
            </div>
 <div class="pull-right">
            <button id="addMarkToMarketRate" type="button" class="btn btn-sm btn-info"
                                                onclick="vm.addMarkToMarketRate()">
                                            Update Mark To Market Rate</button>
                                        
                    <button id="addInterestRate" type="button" class="btn btn-sm btn-info"
                            onclick="vm.addInterestRateDiff()">
                        Update Interest Rate Differential</button>
                </div>
                                    
                                   
        </fieldset>

        <!-- Abs performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Absolute Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.abs_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.abs_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: abs_measure_type_id", @class = "form-control", @disabled="disabled" })
                </div>
                <div class="col-sm-3" data-bind="visible: abs_measure_type_id() == 2">
                    <input class="input-xlarge" id="absCurrencyTypeAhead" type="hidden" data-bind="value: abs_currency_id" />
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: abs_return_value" disabled="disabled" />
                    <span class="validationMessage" data-bind="validationMessage: abs_return_value"></span> 
                </div>
            </div>
 <div class="pull-right">
            <button type="button" data-toggle="modal" onclick="  LoadAbsolutePerformanceData();" class="btn btn-sm btn-info">Correct Absolute Performance</button>
                                        
    <button type="button" data-toggle="modal" onclick="$('#addAbsolutePerformanceModal').modal('show');" class="btn btn-sm btn-info">Update Absolute Performance</button>
                </div>
        </fieldset>

        <!-- Rel performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Relative Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.rel_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.rel_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: rel_measure_type_id", @class = "form-control", @disabled="disabled"})
                </div>


                <div class="col-sm-3" data-bind="visible: rel_measure_type_id() == 2">

                    <input class="input-xlarge" id="relCurrencyTypeAhead" type="hidden" data-bind="value: rel_currency_id" disabled="disabled"/>
                </div>


                <div class="col-sm-3">
                    <input type="text" data-bind="value: rel_return_value" disabled="disabled"/>
<span class="validationMessage" data-bind="validationMessage: rel_return_value"></span> 
                </div>
            </div>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.return_benchmark_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="relBenchmarkTypeAhead" type="hidden" data-bind="value: return_benchmark_id" disabled="disabled"/>
                    <span class="validationMessage" data-bind="validationMessage: return_benchmark_id"></span>
                </div>
            </div>
            <div class="pull-right">
            <button id="editRelativePerformance" type="button" class="btn btn-sm btn-info"
                                                onclick="LoadRelativePerformanceData();">
                                            Correct Relative Performance</button>
                                        
                    <button id="addRelativePerformance" type="button" class="btn btn-sm btn-info"
                            onclick="$('#addRelativePerformanceModal').modal('show');">
                         Update Relative Performance</button>
                </div>
        </fieldset>

        <!-- Comments ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Trade Comments</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.comments)
                </div>

                <div class="col-sm-8">
                    @Html.TextAreaFor(model => model.comments, new { @data_bind = "value: comments", @class = "form-control", @rows="5", @cols="90", @disabled="disabled"})
<span class="validationMessage" data-bind="validationMessage: comments"></span> 
                </div>
            </div>

            <div class="pull-right">
                <button id="editComment" type="button" class="btn btn-sm btn-info"
                    onclick="vm.editComment()">
                    Correct Comment</button>
                <button id="addComment" type="button" class="btn btn-sm btn-info"
                    onclick="vm.addComment()">
                    Update Comment</button>
            </div>
        </fieldset>

        <div class="pull-right">
<button id="create" type="submit" class="btn btn-primary">Save</button>
            <a id="createUrl" href="@Html.AttributeEncode(Url.Action("Create", "Trade"))" style="display:none;"></a>
            <button name="ClientCancel" class="btn btn-primary" onclick=" window.onbeforeunload = null; document.location.href = $('#cancelUrl').attr('href');">Cancel</button>
            <a id="cancelUrl" href="@Html.AttributeEncode(Url.Action("Index", "Home"))" style="display:none;"></a>
        </div>

    </fieldset>
</form>

<pre data-bind='text: ko.toJSON($root, null, 2), visible: debug'></pre>
<!-- Modal -->
<div class="modal fade" id="addAbsolutePerformanceModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                 <h3 class="modal-title">Update Absolute Performance</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <div class="row">
                        <div class="control-label col-sm-2">
                            @Html.LabelFor(model => model.abs_measure_type_id)
                        </div>
                    </div>      
                    <div class="row">
                        <div class="col-sm-2">
                            @Html.DropDownListFor(model => model.abs_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: edit_abs_measure_type_id", @class = "form-control" , @width="300px"})
                        </div>
                        <div class="col-sm-4" data-bind="visible: edit_abs_measure_type_id() == 2">
                            <input  id="modalAbsCurrencyTypeAhead" type="hidden" data-bind="value: edit_abs_currency_id" />
                        </div>
                        <div class="col-sm-3">
                            <input type="text" data-bind="value: edit_abs_return_value"  />
                            <span class="validationMessage" data-bind="validationMessage: edit_abs_return_value"></span> 
                        </div>
                        <div class="col-sm-3">
                            <div class="input-append date" id="dpAddAbsPerformance" data-datepicker-format="YYYY-MM-DD">
                                <input class="span2" size="20" type="text" data-bind="value: edit_abs_last_updated, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                                <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                                <span class="validationMessage" data-bind="validationMessage: instruction_entry_date"></span>
                            </div>  
                        </div>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
               <button type="button" class="btn btn-primary" onclick="vm.Save_AbsPerformance_Edit_Record()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> 
            </div>
        </div>
        <!-- /.modal-content -->
</div>
<!-- /.modal -->

<!-- Modal -->
<div class="modal fade" id="editAbsolutePerformanceModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                 <h3 class="modal-title">Correct Absolute Performance</h3>
            </div>
            <div class="modal-body">

               <div class="center-block"id="grid" style="height: 400px; width: 600px"  
                    data-bind="koGrid: { data: abs_Performanceitems, afterSelectionChange: function () { return true; },
    columnDefs: [{ field: 'measure_type', displayName: 'Return Type',width:'300'},
                 { field: 'return_value', displayName: 'Value',width:'150' },
                 { field: 'last_updated',displayName: 'Last Updated',width:'125' }],
    autogenerateColumns: false,  
    multiSelect: false,
    showFilter: true,
    showColumnMenu: false,
    selectedItems: abs_SelectedItems,
    footerRowHeight: 30
}">
                </div>
                <br/>
<div class="form-group">
                    <div class="row">
                        <div class="control-label col-sm-2">
                            @Html.LabelFor(model => model.abs_measure_type_id)
                        </div>
                    </div>      
    <div class="row">
        <div class="col-sm-2">
            @Html.DropDownListFor(model => model.abs_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: edit_abs_measure_type_id", @class = "form-control" , @width="300px"})
        </div>
        <div class="col-sm-4" data-bind="visible: edit_abs_measure_type_id() == 2">
            <input  id="modalEditAbsCurrencyTypeAhead" type="hidden" data-bind="value: edit_abs_currency_id" />
        </div>
        <div class="col-sm-3">
            <input type="text" data-bind="value: edit_abs_return_value"  />
            <span class="validationMessage" data-bind="validationMessage: edit_abs_return_value"></span> 
        </div>
        <div class="col-sm-3">
            <div class="input-append date" id="dpEditAbsPerformance" data-datepicker-format="YYYY-MM-DD">
                <input class="span2" size="20" type="text" data-bind="value: edit_abs_last_updated, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                <span class="validationMessage" data-bind="validationMessage: edit_abs_last_updated"></span>
            </div>  
        </div>
    </div>
  </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="vm.Save_AbsPerformance_Edit_Record()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> 
            </div>
        </div>
        <!-- /.modal-content -->
</div>
<!-- /.modal -->
<!-- Modal -->
<div class="modal fade" id="addRelativePerformanceModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                 <h3 class="modal-title">Update Relative Performance</h3>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <div class="row">
                        <div class="control-label col-sm-2">
                            @Html.LabelFor(model => model.rel_measure_type_id)
                        </div>
                    </div>      
                    <div class="row">
                        <div class="col-sm-2">
                            @Html.DropDownListFor(model => model.rel_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: edit_rel_measure_type_id", @class = "form-control" , @width="300px"})
                        </div>
                        <div class="col-sm-4" data-bind="visible: edit_rel_measure_type_id() == 2">
                            <input  id="modalRelCurrencyTypeAhead" type="hidden" data-bind="value: edit_rel_currency_id" />
                        </div>
                        <div class="col-sm-3">
                            <input type="text" data-bind="value: edit_rel_return_value"  />
                            <span class="validationMessage" data-bind="validationMessage: edit_rel_return_value"></span> 
                        </div>
                        <div class="col-sm-3">
                            <div class="input-append date" id="dpAddRelPerformance" data-datepicker-format="YYYY-MM-DD">
                                <input class="span2" size="20" type="text" data-bind="value: edit_rel_last_updated, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                                <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                                <span class="validationMessage" data-bind="validationMessage: edit_rel_last_updated"></span>
                            </div>  
                        </div>
                    </div>
                    <div class="row">
                        <div class="control-label col-sm-3">
                            @Html.LabelFor(model => model.return_benchmark_id)
                        </div>
                    </div>
                <div class="row">
                        <div class="col-sm-3">
                            <input class="input-xlarge" id="addRelBenchmarkTypeAhead" type="hidden" data-bind="value: edit_rel_return_benchmark_id"/>
                            <span class="validationMessage" data-bind="validationMessage: edit_rel_return_benchmark_id"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">         
                 <button type="button" class="btn btn-primary" onclick="vm.Save_RelPerformance_Edit_Record()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
</div>
<!-- /.modal -->

<!-- Modal -->
<div class="modal fade" id="editRelativePerformanceModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                 <h3 class="modal-title">Correct Relative Performance</h3>
            </div>
            <div class="modal-body">

               <div class="center-block"id="grid" style="height: 350px; width: 800px"  
                    data-bind="koGrid: { data: rel_Performanceitems, afterSelectionChange: function () { return true; },
    columnDefs: [{ field: 'measure_type', displayName: 'Return Type',width:'300'},
                 { field: 'return_value', displayName: 'Value',width:'100' },
                 { field: 'benchmark_type', displayName: 'Return Type',width:'250'},
                 { field: 'last_updated',displayName: 'Last Updated',width:'125' }],
    autogenerateColumns: false,  
    multiSelect: false,
    showFilter: true,
    showColumnMenu: false,
    selectedItems: rel_SelectedItems,
    footerRowHeight: 30
}">
                </div>
                <br/>
<div class="form-group">
                    <div class="row">
                        <div class="control-label col-sm-2">
                            @Html.LabelFor(model => model.rel_measure_type_id)
                        </div>
                    </div>      
    <div class="row">
        <div class="col-sm-2">
            @Html.DropDownListFor(model => model.rel_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: edit_rel_measure_type_id", @class = "form-control" , @width="300px"})
        </div>
        <div class="col-sm-4" data-bind="visible: edit_rel_measure_type_id() == 2">
            <input  id="modalEditRelCurrencyTypeAhead" type="hidden" data-bind="value: edit_rel_currency_id" />
        </div>
        <div class="col-sm-3">
            <input type="text" data-bind="value: edit_rel_return_value"  />
            <span class="validationMessage" data-bind="validationMessage: edit_rel_return_value"></span> 
        </div>
        <div class="col-sm-3">
            <div class="input-append date" id="dpEditRelPerformance" data-datepicker-format="YYYY-MM-DD">
                <input class="span2" size="20" type="text" data-bind="value: edit_rel_last_updated, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                <span class="validationMessage" data-bind="validationMessage: edit_rel_last_updated"></span>
            </div>  
        </div>
    </div>
    <div class="row">
                        <div class="control-label col-sm-3">
                            @Html.LabelFor(model => model.return_benchmark_id)
                        </div>
                    </div>
    <div class="row">
         <div class="col-sm-3">
                            <input class="input-xlarge" id="editRelBenchmarkTypeAhead" type="hidden" data-bind="value: edit_rel_return_benchmark_id"/>
                            <span class="validationMessage" data-bind="validationMessage: edit_rel_return_benchmark_id"></span>
                        </div>
    </div>
                </div>
            </div>
            <div class="modal-footer">
                 <button type="button" class="btn btn-primary" onclick="vm.Save_RelPerformance_Edit_Record()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> 
            </div>
        </div>
        <!-- /.modal-content -->
</div>
<!-- /.modal -->
@section scripts{

<script type="text/html" id="AddComment">
 <div class="modal fade" id="AddComment">
    <div class="modal-dialog">
             <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-hidden="true" data-bind="click: cancel">&times;</button>
                    <h3>Update Comment</h3>
                </div>
                <div class="modal-body">
                    <form action="#" data-bind="submit: add">
                        <div class="control-group">
                            <label class="control-label">Comments:</label>
                            <div class="controls">
                                <textarea data-bind="value: text" rows="6" cols="75"></textarea>
                                <span class="validationMessage" data-bind="validationMessage: text"></span> 
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-bind="click: add">Update</button>
                    <button type="button" class="btn btn-default" data-bind="click: cancel">Close</button>
                </div>
            </div>
        </div>
</div>
</script>

<script type="text/html" id="EditComment">
 <div class="modal fade" id="EditComment">
    <div class="modal-dialog">
             <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-hidden="true" data-bind="click: cancel">&times;</button>
                    <h3>Correct Comment</h3>
                </div>
                <div class="modal-body">
                    <form action="#" data-bind="submit: save">
                        <div class="control-group">
                            <label class="control-label">Comments:</label>
                            <div class="controls">
                                <textarea data-bind="value: text" rows="6" cols="75"></textarea>
                                <span class="validationMessage" data-bind="validationMessage: text"></span>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-bind="click: save">Save</button>
                    <button type="button" class="btn" data-bind="click: cancel">Cancel</button>
                </div>
            </div>
        </div>
</div>
</script>

    <script type="text/html" id="AddMarkToMarketRate">     
        <div class="modal fade" id="AddMarkToMarketRate">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" aria-hidden="true" data-bind="click: cancel">&times;</button>
                        <h3>Update Mark to Market Rate</h3>
                    </div>
                    <div class="modal-body">
                        <form action="#" data-bind="submit: add">
                            <div class="control-group">
                                <label class="control-label">Mark to Market Rate:</label>
                                <div class="controls">
                                    <input type="text" data-bind="value: text"></input>
                                    <span class="validationMessage" data-bind="validationMessage: text"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bind="click: add">Save</button>
                        <button type="button" class="btn btn-default" data-bind="click: cancel">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script type="text/html" id="AddInterestRateDiff">   
        <div class="modal fade" id="AddInterestRateDiff" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h3>Update Interest Rate Differential</h3>

                    </div>
                    <div class="modal-body">
                        <form action="#" data-bind="submit: add">
                            <div class="control-group">
                                <label class="control-label">Interest Rate Differential:</label>
                                <div class="controls">
                                    <input type="text" data-bind="value: text"></input>
                                    <span class="validationMessage" data-bind="validationMessage: text"></span>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bind="click: add">Save</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
                <!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>
        <!-- /.modal -->
    </script>

  
<script src="~/Scripts/app/viewmodels/tradeEditViewModel.js"></script>
<script src="~/Scripts/app/viewmodels/commentEditViewModel.js"></script>
<script src="~/Scripts/app/viewmodels/markRateEditViewModel.js"></script>
<script src="~/Scripts/app/viewmodels/interestRateDiffEditViewModel.js"></script>
    <script type="text/javascript">
          
      
        
        $(document).ready(function () {
            
            // when .modal-wide opened, set content-body height based on browser height; 200 is appx height of modal padding, modal title and button bar

            $(".modal-wide").on("show.bs.modal", function() {
                var height = $(window).height() - 200;
                $(this).find(".modal-body").css("max-height", height);
            });

            //HACK to show select2 in bootstrap modals
            $.fn.modal.Constructor.prototype.enforceFocus = function () {};
           
            window.onbeforeunload = function () {
                return 'Are you sure you want to navigate away from this page?';
            };

            //init form custom controls
            $('#relativityId').val(2);

            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpInstructionEntry').datepicker(
                {
                    setDate: moment(new Date(), "YYYY-MM-DD")
                });
            $('#dpInstructionExit').datepicker();

            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpAddAbsPerformance').datepicker(
                {
                    setDate: moment(new Date(), "YYYY-MM-DD")
                });
            
            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpEditAbsPerformance').datepicker(
                {
                    //setDate: moment(new Date(), "YYYY-MM-DD")
                });
            
            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpAddRelPerformance').datepicker(
                {
                    setDate: moment(new Date(), "YYYY-MM-DD")
                });
            
            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpEditRelPerformance').datepicker(
                {
                    //setDate: moment(new Date(), "YYYY-MM-DD")
                });
            //due to complexiity of nested knockout on tradeleines, all Financial Instruments will be loaded in the viewmodel from server.
            //TODO: Api call for searches on tradable things
            //$(".tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '200px' });

            //trigger changes on typeaheads
            //select2.3.5 jquery control for typeaheads
            //to remotely get Benchmarks for typeaheads
            function format_benchmark(item) {
                return item.benchmark_label;
            }
            $("#BenchmarkTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Benchmark Selection}",
                width: '200px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteBenchmark",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.benchmark_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetBenchmark",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_benchmark,
                formatSelection: format_benchmark
            
            });

            $("#relBenchmarkTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Benchmark Selection}",
                width: '350px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteBenchmark",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.benchmark_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetBenchmark",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_benchmark,
                formatSelection: format_benchmark,

            });
            //end typeAhead
            
            $("#addRelBenchmarkTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Benchmark Selection}",
                width: '350px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteBenchmark",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.benchmark_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetBenchmark",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_benchmark,
                formatSelection: format_benchmark,

            });
            //end typeAhead
            
            $("#editRelBenchmarkTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Benchmark Selection}",
                width: '350px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteBenchmark",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.benchmark_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetBenchmark",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_benchmark,
                formatSelection: format_benchmark,

            });
            //end typeAhead

            //to remotely get linked trades for typeaheads
            function format_trade(item) {
                return item.trade_editorial_label;
            }
            $("#selectRelatedTrades").select2({
                minimumInputLength: 1,
                placeholder: "{Linked Trades}",
                width: '490px',
                allowClear: true,
                multiple: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteLinkedTrades",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetLinkedTrade",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data)  { 
                        var results = [];
                        for( var i = 0; i < data.length; i++ )
                        {
                            results.push(data[i]);
                        }
                        callback(results); 
                    });
                },

                id: function (obj) {
                    return obj.trade_id;
                },
                formatResult: format_trade,
                formatSelection: format_trade
            });
            //end typeAhead
            
            //to remotely get currencies for typeaheads
            function format_currency(item) {
                return item.currency_label;
            }
            $("#CurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '200px',
                allowClear: true,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead
            
            //to remotely get currencies for typeaheads
            $("#modalEditAbsCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '250px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead
            
            //to remotely get currencies for typeaheads
            $("#modalAbsCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '250px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead
          
            //to remotely get currencies for typeaheads
            $("#absCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '200px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead

            //to remotely get currencies for typeaheads
            $("#modalEditRelCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '250px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead
            
            //to remotely get currencies for typeaheads
            $("#modalRelCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '250px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead
            //to remotely get currencies for typeaheads
            $("#relCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '200px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.currency_id;
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead

            //confirm change of relatvity id
            $('#relativityId').on("focus", function (ev) {
                toastr.options.closeButton = true;
                toastr.options.positionClass = "toast-top-left";
                toastr.options.timeOut = 5000; // 5s
                toastr.warning('Changing "Benchmark" will clear all selected "Positions" in all Trade Lines on the form', 'WARNING');
            });

            //ko.mapping.fromJS(GetTradeData('608'), vm);
            // Load initial state from server, convert it to Task instances, then populate self.tasks
            var id = @Html.DisplayFor(model => model.trade_id);
            LoadTradeData(id);

        });//end document.ready

   
        
    
        //to remotely get Financial Instrument for typeaheads
        function typeAheadFinInstr() {
            var newTradableThing = '#' + ko.bindingHandlers.uniqueIdTradableThing.prefix + ko.bindingHandlers.uniqueIdTradableThing.counter;
            $(newTradableThing).select2({
                minimumInputLength: 1,
                placeholder: "{Financial Instrument}",
                width: '275px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteTradableThing",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.tradable_thing_id;
                },
                formatResult: function (item) {
                    return item.tradable_thing_label;
                },
                formatSelection: function (item) {
                    return item.tradable_thing_label;
                }
            });
        };

        //to remotely get positon for typeaheads
        function typeAheadPosition() {
            var newPosition = '#' + ko.bindingHandlers.uniqueIdPosition.prefix + ko.bindingHandlers.uniqueIdPosition.counter;
            $(newPosition).select2({
                minimumResultsForSearch: -1,
                placeholder: "{Position}",
                width: '175px',
                allowClear: false,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompletePosition",
                    dataType: 'json',
                    type: 'POST',
                    data: function () {
                        var relativityId = $('#relativityId').val();
                        if (relativityId == "" || relativityId == 'undefined') {
                            relativityId = "0";
                        }
                        return {
                            relativityId: relativityId, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function (obj) {
                    return obj.position_id;
                },
                formatResult: function (item) {
                    return item.position_label;
                },
                formatSelection: function (item) {
                    return item.position_label;
                },
                formatNoMatches: function () {
                    return "Please select a Trade Benchmark";
                }
            });
            $('#relativityId').change(function () {
                $(newPosition).select2("val", "").trigger("change");
            });
        };

        $('#btnAddGroup').click(function () {
            $("select.tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '250px' });
        });

        function LoadTradeData(id) {
            var apiGetURL = baseUrl;
            apiGetURL += "Api/Values/Get/";
            apiGetURL += id;

            $.getJSON(apiGetURL, function (allData) {
                var parsed = JSON.parse(allData);
                vm.trade_id(parsed.trade_id);
                vm.service_id(parsed.service_id);
                vm.length_type_id(parsed.length_type_id);
                vm.relativity_id(parsed.relativity_id);
                vm.benchmark_id(parsed.benchmark_id);
                vm.last_updated(parsed.last_updated);
                vm.trade_editorial_label(parsed.trade_editorial_label);
                vm.structure_type_id(parsed.structure_type_id);
                vm.trade_instruction_id(parsed.trade_instruction_id);
                vm.instruction_entry(parsed.instruction_entry);
                vm.instruction_entry_date(parsed.instruction_entry_date);
                vm.instruction_exit(parsed.instruction_exit);
                vm.instruction_exit_date(parsed.instruction_exit_date);
                vm.instruction_type_id(parsed.instruction_type_id);
                vm.instruction_label(parsed.instruction_label);
                vm.hedge_id(parsed.hedge_id);
                vm.currency_id(parsed.currency_id); 
                vm.related_trade_ids(parsed.related_trade_ids),
                vm.apl_func(parsed.apl_func);
                vm.mark_track_record_id(parsed.mark_track_record_id);
                vm.mark_to_mark_rate(parsed.mark_to_mark_rate);
                vm.int_track_record_id(parsed.int_track_record_id);
                vm.int_track_record_id(parsed.int_track_record_id);
                vm.interest_rate_diff(parsed.interest_rate_diff);
                vm.abs_track_performance_id(parsed.abs_track_performance_id);
                vm.abs_measure_type_id(parsed.abs_measure_type_id);
                vm.abs_currency_id(parsed.abs_currency_id);
                vm.abs_return_value(parsed.abs_return_value);
                vm.rel_track_performance_id(parsed.rel_track_performance_id);
                vm.rel_measure_type_id(parsed.rel_measure_type_id);
                vm.rel_currency_id(parsed.rel_currency_id);
                vm.rel_return_value(parsed.rel_return_value);
                vm.return_benchmark_id(parsed.return_benchmark_id);
                vm.comment_id(parsed.comment_id);
                vm.comments(parsed.comments);

                $("#BenchmarkTypeAhead").select2("val", parsed.benchmark_id);
                $("#CurrencyTypeAhead").select2("val", parsed.currency_id);
                $("#absCurrencyTypeAhead").select2("val", parsed.abs_currency_id);
                $("#relCurrencyTypeAhead").select2("val", parsed.rel_currency_id);
                $("#relBenchmarkTypeAhead").select2("val", parsed.return_benchmark_id);
                $("#selectRelatedTrades").select2("val",parsed.trade_id);

                //trade groups and lines      
                for( var i = 0; i < parsed.tradegroups.length; i++ )
                {
                
                    var currentParsedGroup = parsed.tradegroups[i];
                    var tradeLinesArray = new Array();                                                                        
                    for( var j = 0; j < currentParsedGroup.tradeLines.length; j++ )
                    {
                        tradeLinesArray[j] = new TradeLine(
                            currentParsedGroup.tradeLines[j].trade_line_id,                                                               currentParsedGroup.tradeLines[j].position_id,
                            currentParsedGroup.tradeLines[j].tradable_thing_id
                        );
                        tradeLinesArray[j].CRUDMode = "edit";

                    }

                
                    var newGroup = new TradeGroup(
                        parsed.tradegroups[i].trade_line_group_id,
                        parsed.tradegroups[i].trade_line_group_type_id,
                        parsed.tradegroups[i].trade_line_group_label,
                        parsed.tradegroups[i].trade_line_group_editorial_label,
                        tradeLinesArray);
                    newGroup.CRUDMode = "edit";
                    vm.tradegroups.push(newGroup);
                }

                $('.tradeLinePosition').select2({
                    minimumResultsForSearch: -1,
                    placeholder: "{Position}",
                    width: '175px',
                    allowClear: false,
                    async: false,
                    ajax: {
                        url: baseUrl + "Trade/AutoCompletePosition",
                        dataType: 'json',
                        type: 'POST',
                        data: function () {
                            var relativityId = $('#relativityId').val();
                            if (relativityId == "" || relativityId == 'undefined') {
                                relativityId = "0";
                            }
                            return {
                                relativityId: relativityId, //search term 
                            };
                        },
                        results: function (data, page) {
                            return {
                                results: data
                            };
                        }
                    },
                    initSelection: function (element, callback) {
                        //console.log('reached here: id:' + element.val())
                        $.ajax({
                            type: "POST",
                            url: baseUrl +  "Trade/GetPosition",
                            dataType: 'json',
                            async: false,
                            data: { id: (element.val()) },
                            success: function (data) {
                            }
                        }).done(function (data) { callback(data[0]); });
                    },
                    id: function (obj) {
                        return obj.position_id;
                    },
                    formatResult: function (item) {
                        return item.position_label;
                    },
                    formatSelection: function (item) {
                        return item.position_label;
                    },
                    formatNoMatches: function () {
                        return "Please select a Trade Benchmark";
                    }
                });

                $('#relativityId').change(function () {
                    $('.tradeLinePosition').select2("val", "").trigger("change");
                });

                $('.tradeLineTradeableThing').select2({
                    minimumInputLength: 1,
                    placeholder: "{Financial Instrument}",
                    width: '275px',
                    allowClear: true,
                    async: false,
                    ajax: {
                        url: baseUrl + "Trade/AutoCompleteTradableThing",
                        dataType: 'json',
                        type: 'POST',
                        data: function (term, page) {
                            return {
                                term: term, //search term 
                            };
                        },
                        results: function (data, page) {
                            return {
                                results: data
                            };
                        }
                    },
                    initSelection: function (element, callback) {
                        //console.log('reached here: id:' + element.val())
                        $.ajax({
                            type: "POST",
                            url: baseUrl +  "Trade/GetTradableThing",
                            dataType: 'json',
                            async: false,
                            data: { id: (element.val()) },
                            success: function (data) {
                            }
                        }).done(function (data) { callback(data[0]); });
                    },
                    id: function (obj) {
                        return obj.tradable_thing_id;
                    },
                    formatResult: function (item) {
                        return item.tradable_thing_label;
                    },
                    formatSelection: function (item) {
                        return item.tradable_thing_label;
                    }
                });

            });

            vm.CRUDMode = "edit";

        };

        function LoadAbsolutePerformanceData() {
            vm.abs_Performanceitems.removeAll();
            vm.abs_SelectedItems.removeAll();
            var apiGetURL = baseUrl;
            apiGetURL += "Trade/GetAbsolutePerformances/";
            apiGetURL += vm.trade_id();

            $.getJSON(apiGetURL, function (allData) {
                vm.abs_Performanceitems(allData);
            });
            
            $('#editAbsolutePerformanceModal').modal('show');
          
        }
        
        function LoadRelativePerformanceData() {
            var apiGetURL = baseUrl;
            apiGetURL += "Trade/GetRelativePerformances/";
            apiGetURL += vm.trade_id();

            $.getJSON(apiGetURL, function (allData) {
                vm.rel_Performanceitems(allData);
            });
            
            $('#editRelativePerformanceModal').modal('show');
          
        }

        //send save request to API            
        function saveTrade() {
            if (vm.saveTradeData() == true) {
                //alert('Trade successfully created');  
            }

        };

    </script>
}



