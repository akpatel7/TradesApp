@model TradesWebApplication.ViewModels.TradesCreationViewModel
@using Newtonsoft.Json
@using TradesWebApplication.DAL.EFModels

@{
    ViewBag.Title = "Trade Edit Update";
    var jsModel = JsonConvert.SerializeObject(Model, Formatting.Indented,
        new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
}

<form role="form" class="form-horizontal" data-bind="submit: function () { saveTrade(); }">
    @Html.ValidationSummary(true)
    <fieldset class="tgroup">
        <legend class="trade_group_head"><strong>Trade Edit</strong></legend>

        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.service_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.service_id, new SelectList(Model.Services, "service_id", "service_code"), "{Service}", new { @data_bind = "value: service_id", @class = "form-control col-xs-2" })
            </div>

        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.length_type_id)
            </div>


            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.length_type_id, new SelectList(Model.LengthTypes, "length_type_id", "length_type_label"), "{Trade Type}", new { @data_bind = "value: length_type_id", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.relativity_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.relativity_id, new SelectList(Model.Relativitys, "relativity_id", "relativity_label"), "{Benchmark}", new { @data_bind = "value: relativity_id", @class = "form-control form-control col-xs-2", @id = "relativityId" })
                        @Html.ValidationMessageFor(model => model.relativity_id)
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3" data-bind="visible: relativity_id() == 2">
                @Html.LabelFor(model => model.benchmark_id)
            </div>

            <div class="col-sm-3" data-bind="visible: relativity_id() == 2">
                <input class="input-xlarge" id="BenchmarkTypeAhead" type="hidden" data-bind="value: benchmark_id" value="0000"/>
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.last_updated)
            </div>

            <div  class="col-sm-3">
                @Html.TextBoxFor(model => model.last_updated, new { @class = "form-control", @disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_label)
            </div>

            <div class="col-sm-3">
                <input type="text" data-bind="value: trade_label" placeholder="{Canonical Label}" disabled="disabled" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_editorial_label)
            </div>

            <div class="col-sm-3">
                <input type="text" class="input-large" data-bind="value: trade_editorial_label" placeholder="{Editorial Label}" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.structure_type_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.structure_type_id, new SelectList(Model.StructureTypes, "structure_type_id", "structure_type_label"), "{Structure}", new { @data_bind = "value: structure_type_id", @class = "form-control" })
            </div>
        </div>

        
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.status)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.status, new SelectList(Model.Status, "status_id", "status_label"), new { @data_bind = "value: status", @class = "form-control"})
                </div>
            </div>

        <!-- trade groups ------------------------------------->
        <fieldset class="tgroup">
            <legend class="trade_group">Group Information</legend>
            <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradegroups'>
                <li>
                    <div class="well col-xs-12">
                        <div class="col-md-12">
                            <div class="row">
                                <h3><strong><span>Group </span><span data-bind='text: ($index() + 1)'></span><span> Information</span></strong></h3>
                            </div>
                            <div class="row">
                                <br />
                            </div>
                        </div>
                        <div class="row">
                            <div class="control-group col-md-3">
                                <div class="row col-md-12">
                                    <strong><span>Group Structure:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    @Html.DropDownListFor(x => x.trade_line_group_type_id, new SelectList(Model.TradeLineGroupTypes, "trade_line_group_type_id", "trade_line_group_type_label"), "{Structure}", new { @data_bind = "value: trade_line_group_type_id, selectedText: trade_line_group_type_string", @class="form-control" })
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Editorial Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_editorial_label" placeholder="{Editorial Label}" />
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Canonical Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_label" placeholder="{Canonical Label}" disabled="disabled" />
                                </div>
                            </div>
                            <div class="form-group col-md-9">
                                <div class="well col-xs-12">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <h4><strong>Trade Line(s)</strong></h4>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <br />
                                    </div>
                                    <div class="row">
                                        <div class="col-md-1">
                                            <strong><span>Order:</span></strong>
                                        </div>
                                        <div class="col-md-4">
                                            <strong><span>Position:</span></strong>
                                        </div>
                                        <div class="col-md-7">
                                            <strong><span>Financial Instrument:</span></strong>
                                        </div>
                                    </div>
                                    <!-- Add a list of trade lines. -->
                                    <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradeLines'>
                                        <li>
                                            <div class="row">
                                                <div class="col-md-1">
                                                    <strong>
                                                        <h3 data-bind='text: ($index() + 1)'></h3>
                                                    </strong>
                                                </div>
                                                <div class="col-md-4">
                                                     <input type="hidden" data-bind="uniqueIdPosition: position_id, value: position_id" class="tradeLinePosition"/>
                                                </div>
                                                <div class="col-md-6">
                                                    <input type="hidden" data-bind="uniqueIdTradableThing: tradable_thing_id, value: tradable_thing_id" class="tradeLineTradeableThing"/>
                                                </div>
                                                <div class="col-md-1">
                                                    <button type="button" class="btn btn-sm btn-danger" data-bind='click: function () { $parent.removeLine($data); }'>
                                                        <span class="glyphicon glyphicon-remove-circle"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <br />
                                            <button id="btnAddLine" data-bind='click: function () { addLine(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new trade line</button>
                                        </div>
                                    </div>
                                </div>
                                <!-- tradeline row -->
                            </div>
                            <!-- tradeline well -->
                            <div class="row col-md-12">
                                <button data-bind='click: $root.removeGroup' class='btn btn-sm btn-danger'>Delete trade group</button>
                            </div>
                        </div>
                        <!-- group row -->
                    </div>
                    <!-- group well-->
                </li>
            </ul>
            <button id="btnAddGroup" data-bind='click: function () { addGroup(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new group</button>
        </fieldset>
        
        <!-- instructions ------------------------------------- -->
         <fieldset class="tgroup">
            <legend class="trade_group">Instructions</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry)
                </div>
                <div class="col-sm-6">
                    <input type="text" data-bind="value: instruction_entry" disabled="disabled"/>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry_date)
                </div>
                <div class="input-append date col-sm-4" id="dpInstructionEntry" data-datepicker-format="YYYY-MM-DD">
                    <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>
                    <input class="span2" size="16" type="text" value="" data-bind="value: instruction_entry_date" disabled="disabled">
                </div>
                @*<span data-bind="visible: instruction_entry_date.isValid() == false" class="validationMessage">This field is required.</span>*@
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit)
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: instruction_exit" disabled="disabled"/>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit_date)
                </div>
                <div class="input-append date col-sm-7" id="dpInstructionExit" data-date="" data-datepicker-format="YYYY-MM-DD">
                    <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>
                    <input class="span2" size="16" type="text" value="" data-bind="value: instruction_exit_date" disabled="disabled">
                    <span data-bind="visible: instructionDateCheck() == false" class="validationMessage">This field must be greater than instruction entry date.</span>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_type_id)
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.instruction_type_id, new SelectList(Model.InstructionTypes, "instruction_type_id", "instruction_type_label"), new { @data_bind = "value: instruction_type_id", @class = "form-control", @disabled="disabled" })
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: instruction_label" disabled="disabled"/>

                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.hedge_id)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.hedge_id, new SelectList(Model.HedgeTypes, "hedge_id", "hedge_label"), new { @data_bind = "value: hedge_id", @class = "form-control", @disabled="disabled" })
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.currency_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="CurrencyTypeAhead" type="hidden" data-bind="value: currency_id" disabled="disabled"/>
                </div>
            </div>

        </fieldset>
        
        

        <!-- supplementary info ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Supplementary Information</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.related_trade_ids)
                </div>
                 <div class="col-sm-6">
                      <input class="input-xlarge" id="selectRelatedTrades" type="hidden" data-bind="value: related_trade_ids_list"/>
                </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-3">
                        @Html.LabelFor(model => model.apl_func)
                    </div>
                    <div class="col-sm-3">
                        <input type="text" data-bind="value: apl_func" maxlength="255" />
                    </div>
                </div>
        </fieldset>
        <!-- FX Spot and Carry ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">FX Spot and Carry</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.mark_to_mark_rate)
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: mark_to_mark_rate" disabled="disabled"/>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.interest_rate_diff)
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: interest_rate_diff" disabled="disabled"/>
                </div>
            </div>
        </fieldset>

        <!-- Abs performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Absolute Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.abs_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.abs_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: abs_measure_type_id", @class = "form-control", @disabled="disabled" })
                </div>
                <div class="col-sm-3" data-bind="visible: abs_measure_type_id() == 2">
                    <input class="input-xlarge" id="absCurrencyTypeAhead" type="hidden" data-bind="value: abs_currency_id" />
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: abs_return_value" disabled="disabled" />
                </div>
            </div>
        </fieldset>

        <!-- Rel performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Relative Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.rel_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.rel_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: rel_measure_type_id", @class = "form-control", @disabled="disabled" })
                </div>


                <div class="col-sm-3" data-bind="visible: rel_measure_type_id() == 2">

                    <input class="input-xlarge" id="relCurrencyTypeAhead" type="hidden" data-bind="value: rel_currency_id" disabled="disabled"/>
                </div>


                <div class="col-sm-3">
                    <input type="text" data-bind="value: rel_return_value" disabled="disabled"/>
                </div>
            </div>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.return_benchmark_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="relBenchmarkTypeAhead" type="hidden" data-bind="value: return_benchmark_id" disabled="disabled"/>
                </div>
            </div>
        </fieldset>

        <!-- Comments ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Trade Comments</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.comments)
                </div>

                <div class="col-sm-8">
                    @Html.TextAreaFor(model => model.comments, new { @data_bind = "value: comments", @class = "form-control", @rows="5", @cols="90", @disabled="disabled"})
                </div>
            </div>
        </fieldset>

        <p>
            <button id="create" type="submit" class="btn btn-primary">Save</button>
            <a id="createUrl" href="@Html.AttributeEncode(Url.Action("Create", "Trade"))" style="display:none;"></a>
            <button name="ClientCancel" class="btn btn-primary" onclick=" window.onbeforeunload = null; document.location.href = $('#cancelUrl').attr('href');">Cancel</button>
            <a id="cancelUrl" href="@Html.AttributeEncode(Url.Action("Index", "Home"))" style="display:none;"></a>
        </p>

    </fieldset>
    </div>
</form>

<pre data-bind='text: ko.toJSON($root, null, 2), visible: debug'></pre>

@section scripts{
    <script src="~/Scripts/app/viewmodels/tradeEditViewModel.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        window.onbeforeunload = function () {
            return 'Are you sure you want to navigate away from this page?';
        };

        //init form custom controls
        $('#relativityId').val(2);

        //datetimepickers - moment-datetimepicker for bootstrap
        $('#dpInstructionEntry').datepicker(
                    {
                        startDate: moment(new Date(), "YYYY-MM-DD")
                    });
        $('#dpInstructionExit').datepicker();

        //due to complexiity of nested knockout on tradeleines, all Financial Instruments will be loaded in the viewmodel from server.
        //TODO: Api call for searches on tradable things
        //$(".tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '200px' });

        //trigger changes on typeaheads
        //select2.3.5 jquery control for typeaheads
        //to remotely get Benchmarks for typeaheads
        function format_benchmark(item) {
            return item.benchmark_label;
        }
        $("#BenchmarkTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Benchmark Selection}",
            width: '200px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteBenchmark",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.benchmark_id;
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetBenchmark",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data) { callback(data[0]); });
            },
            formatResult: format_benchmark,
            formatSelection: format_benchmark
            
        });

        $("#relBenchmarkTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Benchmark Selection}",
            width: '200px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteBenchmark",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.benchmark_id;
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetBenchmark",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data) { callback(data[0]); });
            },
            formatResult: format_benchmark,
            formatSelection: format_benchmark,

        });
        //end typeAhead

        //to remotely get linked trades for typeaheads
        function format_trade(item) {
            return item.trade_editorial_label;
        }
        $("#selectRelatedTrades").select2({
            minimumInputLength: 1,
            placeholder: "{Linked Trades}",
            width: '500px',
            allowClear: true,
            multiple: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteLinkedTrades",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetLinkedTrade",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data)  { 
                    var results = [];
                    for( var i = 0; i < data.length; i++ )
                    {
                        results.push(data[i]);
                    }
                    callback(results); 
                });
            },

            id: function (obj) {
                return obj.trade_id;
            },
            formatResult: format_trade,
            formatSelection: format_trade
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        function format_currency(item) {
            return item.currency_label;
        }
        $("#CurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetCurrency",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data) { callback(data[0]); });
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        $("#absCurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetCurrency",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data) { callback(data[0]); });
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        $("#relCurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            initSelection: function (element, callback) {
                //console.log('reached here: id:' + element.val())
                $.ajax({
                    type: "POST",
                    url: baseUrl + "Trade/GetCurrency",
                    dataType: 'json',
                    async: false,
                    data: { id: (element.val()) },
                    success: function (data) {
                    }
                }).done(function (data) { callback(data[0]); });
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //confirm change of relatvity id
        $('#relativityId').on("focus", function (ev) {
            toastr.options.closeButton = true;
            toastr.options.positionClass = "toast-top-left";
            toastr.options.timeOut = 5000; // 5s
            toastr.warning('Changing "Benchmark" will clear all selected "Positions" in all Trade Lines on the form', 'WARNING');
        });

        //ko.mapping.fromJS(GetTradeData('608'), vm);
        // Load initial state from server, convert it to Task instances, then populate self.tasks
        var id = @Html.DisplayFor(model => model.trade_id);
        LoadTradeData(id);

});//end document.ready

   
        
    
    //to remotely get Financial Instrument for typeaheads
    function typeAheadFinInstr() {
        var newTradableThing = '#' + ko.bindingHandlers.uniqueIdTradableThing.prefix + ko.bindingHandlers.uniqueIdTradableThing.counter;
        $(newTradableThing).select2({
            minimumInputLength: 1,
            placeholder: "{Financial Instrument}",
            width: '275px',
            allowClear: true,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteTradableThing",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.tradable_thing_id;
            },
            formatResult: function (item) {
                return item.tradable_thing_label;
            },
            formatSelection: function (item) {
                return item.tradable_thing_label;
            }
        });
    };

    //to remotely get positon for typeaheads
    function typeAheadPosition() {
        var newPosition = '#' + ko.bindingHandlers.uniqueIdPosition.prefix + ko.bindingHandlers.uniqueIdPosition.counter;
        $(newPosition).select2({
            minimumResultsForSearch: -1,
            placeholder: "{Position}",
            width: '175px',
            allowClear: false,
            async: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompletePosition",
                dataType: 'json',
                type: 'POST',
                data: function () {
                    var relativityId = $('#relativityId').val();
                    if (relativityId == "" || relativityId == 'undefined') {
                        relativityId = "0";
                    }
                    return {
                        relativityId: relativityId, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.position_id;
            },
            formatResult: function (item) {
                return item.position_label;
            },
            formatSelection: function (item) {
                return item.position_label;
            },
            formatNoMatches: function () {
                return "Please select a Trade Benchmark";
            }
        });
        $('#relativityId').change(function () {
            $(newPosition).select2("val", "").trigger("change");
        });
    };

    $('#btnAddGroup').click(function () {
        $("select.tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '250px' });
    });

    function LoadTradeData(id) {
        var apiGetURL = baseUrl;
        apiGetURL += "Api/Values/Get/";
        apiGetURL += id;

        $.getJSON(apiGetURL, function (allData) {
            var parsed = JSON.parse(allData);
            vm.trade_id(parsed.trade_id);
            vm.service_id(parsed.service_id);
            vm.length_type_id(parsed.length_type_id);
            vm.relativity_id(parsed.relativity_id);
            vm.benchmark_id(parsed.benchmark_id);
            vm.last_updated(parsed.last_updated);
            vm.trade_editorial_label(parsed.trade_editorial_label);
            vm.structure_type_id(parsed.structure_type_id);
            vm.instruction_entry(parsed.instruction_entry);
            vm.instruction_entry_date(parsed.instruction_entry_date);
            vm.instruction_exit(parsed.instruction_exit);
            vm.instruction_exit_date(parsed.instruction_exit_date);
            vm.instruction_type_id(parsed.instruction_type_id);
            vm.instruction_label(parsed.instruction_label);
            vm.hedge_id(parsed.hedge_id);
            vm.currency_id(parsed.currency_id); 
            vm.related_trade_ids(parsed.related_trade_ids),
            vm.apl_func(parsed.apl_func);
            vm.mark_to_mark_rate(parsed.mark_to_mark_rate);
            vm.interest_rate_diff(parsed.interest_rate_diff);
            vm.abs_measure_type_id(parsed.abs_measure_type_id);
            vm.abs_currency_id(parsed.abs_currency_id);
            vm.abs_return_value(parsed.abs_return_value);
            vm.rel_measure_type_id(parsed.rel_measure_type_id);
            vm.rel_currency_id(parsed.rel_currency_id);
            vm.rel_return_value(parsed.rel_return_value);
            vm.return_benchmark_id(parsed.return_benchmark_id);
            vm.comments(parsed.comments);

            $("#BenchmarkTypeAhead").select2("val", parsed.benchmark_id);
            $("#CurrencyTypeAhead").select2("val", parsed.currency_id);
            $("#absCurrencyTypeAhead").select2("val", parsed.abs_currency_id);
            $("#relCurrencyTypeAhead").select2("val", parsed.rel_currency_id);
            $("#relBenchmarkTypeAhead").select2("val", parsed.return_benchmark_id);
            $("#selectRelatedTrades").select2("val",parsed.trade_id);

            //trade groups and lines      
            for( var i = 0; i < parsed.tradegroups.length; i++ )
            {
                
                var currentParsedGroup = parsed.tradegroups[i];
                var tradeLinesArray = new Array();                                                                        
                for( var j = 0; j < currentParsedGroup.tradeLines.length; j++ )
                {
                    tradeLinesArray[j] = new TradeLine(
                                                    currentParsedGroup.tradeLines[j].trade_line_id,                                                               currentParsedGroup.tradeLines[j].position_id,
                                                    currentParsedGroup.tradeLines[j].tradable_thing_id
                    );
                }

                
                var newGroup = new TradeGroup(
                                            parsed.tradegroups[i].trade_line_group_id,
                                            parsed.tradegroups[i].trade_line_group_type_id,
                                            parsed.tradegroups[i].trade_line_group_label,
                                            parsed.tradegroups[i].trade_line_group_editorial_label,
                                            tradeLinesArray);
                vm.tradegroups.push(newGroup);
            }

            $('.tradeLinePosition').select2({
                minimumResultsForSearch: -1,
                placeholder: "{Position}",
                width: '175px',
                allowClear: false,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompletePosition",
                    dataType: 'json',
                    type: 'POST',
                    data: function () {
                        var relativityId = $('#relativityId').val();
                        if (relativityId == "" || relativityId == 'undefined') {
                            relativityId = "0";
                        }
                        return {
                            relativityId: relativityId, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl +  "Trade/GetPosition",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                id: function (obj) {
                    return obj.position_id;
                },
                formatResult: function (item) {
                    return item.position_label;
                },
                formatSelection: function (item) {
                    return item.position_label;
                },
                formatNoMatches: function () {
                    return "Please select a Trade Benchmark";
                }
            });

            $('#relativityId').change(function () {
                $('.tradeLinePosition').select2("val", "").trigger("change");
            });

            $('.tradeLineTradeableThing').select2({
                minimumInputLength: 1,
                placeholder: "{Financial Instrument}",
                width: '275px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteTradableThing",
                    dataType: 'json',
                    type: 'POST',
                    data: function (term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function (data, page) {
                        return {
                            results: data
                        };
                    }
                },
                initSelection: function (element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl +  "Trade/GetTradableThing",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function (data) {
                        }
                    }).done(function (data) { callback(data[0]); });
                },
                id: function (obj) {
                    return obj.tradable_thing_id;
                },
                formatResult: function (item) {
                    return item.tradable_thing_label;
                },
                formatSelection: function (item) {
                    return item.tradable_thing_label;
                }
            });
            //for( var i = 0; i < vm.tradegroups.length; i++ )
            //{
            //    var currentGroup = vm.tradegroups[i];
            //    for( var j = 0; j < currentGroup.tradeLines.length; j++ )
            //    {
            //        //Position Typeahead
            //        typeAheadPosition(); //default 2 is the relativity id default onload
            //        //Financial Instrument for typeahead
            //        typeAheadFinInstr();
            //    }    
            //}
            //vm.valueHasMutated();

        });

    };

    //send save request to API            
    function saveTrade() {
        if (vm.saveTradeData() == true) {
            //alert('Trade successfully created');  
        }

    };

</script>
}
