@model PagedList.IPagedList<TradesWebApplication.DAL.EFModels.Trade>
@using PagedList.Mvc;
@using TradesWebApplication.DAL.EFModels
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Trades List";
}

<h2>Trades List</h2>



@using (Html.BeginForm("Index", "Trade", FormMethod.Get))
{
    <p>
        Find by ID: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @id="FindByIdText"})
        <input type="submit" onclick="$('#FindByService').val('');" value="Search" />
    </p>
     <p>
        Find by Service: @Html.DropDownList("serviceId", (SelectList)ViewBag.Services, String.Empty, new { @id="FindByService"})
        <input type="submit" onclick="$('#FindByIdText').val('');" value="Search" />
    </p>
    <p>
        <button type="button" name="Create" class="btn btn-primary" onclick=" window.onbeforeunload = null; document.location.href = $('#createUrl').attr('href');">Create New Trade</button>
            <a id="createUrl" href="@Html.AttributeEncode(Url.Action("Create", "Trade"))" style="display:none;"></a>               
    </p>
    <p>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
    </p>
}

<table class="table">
    <tr>
        <th>
            @*@Html.DisplayNameFor(model => model.trade_uri)*@
            @Html.ActionLink("Id", "Index", new { sortOrder = ViewBag.TradeIdSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            Service
        </th>
        <th>
            Trade Label
        </th>
        <th>
            System Label
        </th>
        <th>
            Created On
        </th>
        <th>
            Created By
        </th>
        <th>
            Status
        </th>
        <th>
            Publication Status
        </th>
        <th>
            @Html.ActionLink("Last Updated", "Index", new { sortOrder = ViewBag.LastUpdatedSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th style="width:200px"></th>
    </tr>

    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.trade_id)
            </td>
             <td>
                 @Html.DisplayFor(modelItem => item.Service.service_code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.trade_editorial_label)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.trade_label)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.created_on)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.created_by)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status1.status_label)
            </td>
            <td>
                @{
                    var tradeInstruction = item.Trade_Instruction.OrderBy(i => i.created_on).LastOrDefault();
                }
                @if (tradeInstruction == null)
                {
                    <text>Open</text>
                }
                else
                {
                    if( tradeInstruction.instruction_exit_date == null)
                    { 
                        <text>Open</text>
                    }
                    else
                    {   
                        <text>Closed</text>
                    }
                }
               
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.last_updated)
            </td>
            <td>
                <script type="text/javascript">
                    var trade_id = @Html.DisplayFor(modelItem => item.trade_id);
                </script>
                <button name="Edit" class="btn btn-sm btn-primary" onclick="window.onbeforeunload = null; document.location.href = '@Url.Action("Edit", "Trade", new { id = item.trade_id })'">Edit</button>
               
                
                <button name="Edit" class="btn btn-sm btn-primary" onclick="window.onbeforeunload = null; document.location.href = document.location.href = '@Url.Action("Details", "Trade", new { id = item.trade_id })'">Details</button>
                <a id="detailsUrl" href="@Html.AttributeEncode(Url.Action("Details", "Trade", new { id = item.trade_id }))" style="display:none;"></a>
               
                <button id="addComment" type="button" class="btn btn-sm btn-info"
                        onclick="var trade_id = @Html.DisplayFor(modelItem => item.trade_id); vm.trade_id( @Html.DisplayFor(modelItem => item.trade_id)); vm.addComment();">
                    Update Comment  </button>                                                             
                <button id="addTradeInstruction" type="button" class="btn btn-sm btn-info"
                        onclick="var trade_id = @Html.DisplayFor(modelItem => item.trade_id); vm.trade_id(trade_id); $('#addTradeInstructionModal').modal('show');">
                    Update Instruction</button>
            </td>
        </tr>
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))

<!-- /.modal -->
<!-- Modal -->
<div class="modal fade" id="addTradeInstructionModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true" onclick="afterModalEditLoadData();">&times;</button>
            <h3 class="modal-title">Update Trade Instruction</h3>
        </div>
        <div class="modal-body">
            <div class="control-group">
               
                <div class="row">
                    <div class="control-label col-sm-3">
                        <label>Entry Level:</label>
                    </div>
                    <div class="col-sm-3">
                        <input type="text" class="form-control input-xlarge" data-bind="value: edit_instruction_entry" />
                        <span class="validationMessage" data-bind="validationMessage: edit_instruction_entry"></span>
                    </div>
  
                    <div class="control-label col-sm-3">
                        <label>Start Date:</label>
                    </div>
                    <div class="col-sm-3">
                        <div class="input-append date" id="dpAddInstructionEntry" data-datepicker-format="YYYY-MM-DD">
                            <input class="span2" size="20" type="text" data-bind="value: edit_instruction_entry_date, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                            <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                            <span class="validationMessage" data-bind="validationMessage: edit_instruction_entry_date"></span>
                        </div>  
                    </div>
                </div>
                <br/>
                <div class="row">
                    <div class="control-label col-sm-3">
                        <label>Exit Level:</label>
                    </div>
                    <div class="col-sm-3">
                        <input class="form-control input-xlarge" type="text" data-bind="value: edit_instruction_exit" />
                    </div>
     

                    <div class="control-label col-sm-3">
                        <label>Exit Date:</label>
                    </div>

                    <div class="col-sm-3">
                        <div class="input-append date" id="dpAddInstructionExit" data-date="" data-datepicker-format="YYYY-MM-DD">
                            <input class="span2" size="20" type="text" data-bind="value: edit_instruction_exit_date, datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }" >
                            <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>
                            <span data-bind="visible: editInstructionDateCheck() == false" class="validationMessage">This field must be greater than instruction entry date.</span>
                        </div>
                    </div>
                </div>
         
<br/>
                <div class="row">    
                    <div class="control-label col-sm-3">
                        <label>Instruction:</label>
                    </div>

                    <div class="col-sm-3">
                    @Html.DropDownList("instructionTypeId", (SelectList)ViewBag.InstructionTypes, String.Empty, new { @data_bind = "value: edit_instruction_type_id", @class = "form-control"})

                    </div>
       
                        <div class="col-sm-2">
                            <input type="text" data-bind="value: edit_instruction_label" />

                        </div>
            
                </div>  
<br/>
                <div class="row">
                    <div class="control-label col-sm-3">
                       <label>Hedge Instructions:</label>
                    </div>

                    <div class="col-sm-3">
                     @Html.DropDownList("hedgeTypeId", (SelectList)ViewBag.HedgeTypes, String.Empty, new { @data_bind = "value: edit_hedge_id", @class = "form-control" })
                    </div>

                    <div class="control-label col-sm-3">
                        <label>Trade Execution Currency:</label>
                    </div>

                    <div class="col-sm-3">
                        <input class="input-xlarge" id="addCurrencyTypeAhead" type="hidden" data-bind="value: edit_currency_id"/>
                    </div>
                </div>

            </div>
</div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" onclick="vm.Save_TradeInstructions_Edit_Record()">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal" onclick="afterModalEditLoadData();">Close</button> 
            </div>

    </div>
        <!-- /.modal-content -->
</div>
<!-- /.modal -->
<!-- Modal -->
@section scripts
{
    <script type="text/html" id="AddComment">
        <div class="modal fade" id="AddComment">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" aria-hidden="true" data-bind="click: cancel">&times;</button>
                        <h3>Update Comment</h3>
                    </div>
                    <div class="modal-body">
                        <form action="#" data-bind="submit: add">
                            <div class="control-group">
                                <label class="control-label">Comments:</label>
                                <div class="controls">
                                    <textarea data-bind="value: text" rows="6" cols="75"></textarea>
                                    <span class="validationMessage" data-bind="validationMessage: text"></span> 
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-bind="click: add">Update</button>
                        <button type="button" class="btn btn-default" data-bind="click: cancel">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script src="~/Scripts/app/viewmodels/tradeEditViewModel.js"></script>
    <script src="~/Scripts/app/viewmodels/commentEditViewModel.js"></script>

    <script type="text/javascript">

        $(document).ready(function() {

            // when .modal-wide opened, set content-body height based on browser height; 200 is appx height of modal padding, modal title and button bar

            $(".modal-wide").on("show.bs.modal", function() {
                var height = $(window).height() - 200;
                $(this).find(".modal-body").css("max-height", height);
            });

            //HACK to show select2 in bootstrap modals
            $.fn.modal.Constructor.prototype.enforceFocus = function() {
            };

            window.onbeforeunload = function() {
                return 'Are you sure you want to navigate away from this page?';
            };


            $('#dpAddInstructionExit').datepicker();

            //datetimepickers - moment-datetimepicker for bootstrap
            $('#dpAddInstructionEntry').datepicker(
                {
                    
                    
                    //setDate: moment(new Date(), "YYYY-MM-DD")
                });

            //to remotely get currencies for typeaheads

            function format_currency(item) {
                return item.currency_label;
            }


            $("#editCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '200px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function(term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function(data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function(obj) {
                    return obj.currency_id;
                },
                initSelection: function(element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function(data) {
                        }
                    }).done(function(data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead

            $("#addCurrencyTypeAhead").select2({
                minimumInputLength: 1,
                placeholder: "{Currency Selection}",
                width: '200px',
                allowClear: true,
                async: false,
                ajax: {
                    url: baseUrl + "Trade/AutoCompleteCurrency",
                    dataType: 'json',
                    type: 'POST',
                    data: function(term, page) {
                        return {
                            term: term, //search term 
                        };
                    },
                    results: function(data, page) {
                        return {
                            results: data
                        };
                    }
                },
                id: function(obj) {
                    return obj.currency_id;
                },
                initSelection: function(element, callback) {
                    //console.log('reached here: id:' + element.val())
                    $.ajax({
                        type: "POST",
                        url: baseUrl + "Trade/GetCurrency",
                        dataType: 'json',
                        async: false,
                        data: { id: (element.val()) },
                        success: function(data) {
                        }
                    }).done(function(data) { callback(data[0]); });
                },
                formatResult: format_currency,
                formatSelection: format_currency
            });
            //end typeAhead


        });
        //end document.ready

        function afterModalEditLoadData() {

            return true;

            //var apiGetURL = baseUrl;
            //apiGetURL += "Api/Values/Get/";
            //apiGetURL += vm.trade_id();

            //$.getJSON(apiGetURL, function(allData) {
            //    var parsed = JSON.parse(allData);
            //vm.trade_id(parsed.trade_id);
            //vm.service_id(parsed.service_id);
            //vm.length_type_id(parsed.length_type_id);
            //vm.relativity_id(parsed.relativity_id);
            //vm.benchmark_id(parsed.benchmark_id);
            //vm.last_updated(parsed.last_updated);
            //vm.trade_editorial_label(parsed.trade_editorial_label);
            //vm.structure_type_id(parsed.structure_type_id);
            //vm.trade_instruction_id(parsed.trade_instruction_id);
            //vm.instruction_entry(parsed.instruction_entry);
            //vm.instruction_entry_date(parsed.instruction_entry_date);
            //vm.instruction_exit(parsed.instruction_exit);
            //vm.instruction_exit_date(parsed.instruction_exit_date);
            //vm.instruction_type_id(parsed.instruction_type_id);
            //vm.instruction_label(parsed.instruction_label);
            //vm.hedge_id(parsed.hedge_id);
            //vm.currency_id(parsed.currency_id);
            //vm.related_trade_ids(parsed.related_trade_ids),
            //vm.apl_func(parsed.apl_func);
            //vm.mark_track_record_id(parsed.mark_track_record_id);
            //vm.mark_to_mark_rate(parsed.mark_to_mark_rate);
            //vm.int_track_record_id(parsed.int_track_record_id);
            //vm.int_track_record_id(parsed.int_track_record_id);
            //vm.interest_rate_diff(parsed.interest_rate_diff);
            //vm.abs_track_performance_id(parsed.abs_track_performance_id);
            //vm.abs_measure_type_id(parsed.abs_measure_type_id);
            //vm.abs_currency_id(parsed.abs_currency_id);
            //vm.abs_return_value(parsed.abs_return_value);
            //vm.rel_track_performance_id(parsed.rel_track_performance_id);
            //vm.rel_measure_type_id(parsed.rel_measure_type_id);
            //vm.rel_currency_id(parsed.rel_currency_id);
            //vm.rel_return_value(parsed.rel_return_value);
            //vm.return_benchmark_id(parsed.return_benchmark_id);
            //vm.comment_id(parsed.comment_id);
            //vm.comments(parsed.comments);

            //$("#BenchmarkTypeAhead").select2("val", parsed.benchmark_id);
            //$("#CurrencyTypeAhead").select2("val", parsed.currency_id);
            //$("#absCurrencyTypeAhead").select2("val", parsed.abs_currency_id);
            //$("#relCurrencyTypeAhead").select2("val", parsed.rel_currency_id);
            //$("#relBenchmarkTypeAhead").select2("val", parsed.return_benchmark_id);
            //$("#selectRelatedTrades").select2("val", parsed.trade_id);

        }

    </script>



}
