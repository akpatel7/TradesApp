@model TradesWebApplication.ViewModels.TradesViewModel
@using Newtonsoft.Json
@using TradesWebApplication.DAL.EFModels

@{
    ViewBag.Title = "Trade Creation";
    var jsModel = JsonConvert.SerializeObject(Model, Formatting.Indented,
        new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
}

<form role="form" class="form-horizontal" data-bind="submit: function () { saveTrade(); }">
    @Html.ValidationSummary(true)
    <fieldset class="tgroup">
        <legend class="trade_group_head"><strong>Trade Creation</strong></legend>

        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.service_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.service_id, new SelectList(Model.Services, "service_id", "service_code"), "{Service}", new { @data_bind = "value: service_id", @class = "form-control col-xs-2" })
<span class="validationMessage" data-bind="validationMessage: service_id"></span>
            </div>


        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.length_type_id)
            </div>


            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.length_type_id, new SelectList(Model.LengthTypes, "length_type_id", "length_type_label"), "{Trade Type}", new { @data_bind = "value: length_type_id", @class = "form-control col-xs-2" })
<span class="validationMessage" data-bind="validationMessage: length_type_id"></span>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.relativity_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.relativity_id, new SelectList(Model.Relativitys, "relativity_id", "relativity_label"), "{Benchmark}", new { @data_bind = "value: relativity_id", @class = "form-control form-control col-xs-2", @id = "relativityId" })
                        <span class="validationMessage" data-bind="validationMessage: relativity_id"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3" data-bind="visible: relativity_id() == 2">
                @Html.LabelFor(model => model.benchmark_id)
            </div>

            <div class="col-sm-3" data-bind="visible: relativity_id() == 2">
                <input class="input-xlarge" id="BenchmarkTypeAhead" type="hidden" data-bind="value: benchmark_id" />
<span class="validationMessage" data-bind="validationMessage: benchmark_id"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.created_on)
            </div>

            <div  class="col-sm-3">
                @Html.TextBoxFor(model => model.created_on, new { @class = "form-control input-xlarge", @disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_label)
            </div>

            <div class="col-sm-3">
                <input type="text" class="form-control input-xlarge" data-bind="value: trade_label" placeholder="{Canonical Label}" disabled="disabled" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.trade_editorial_label)
            </div>

            <div class="col-sm-3">
                <input type="text" class="form-control input-xlarge" data-bind="value: trade_editorial_label" placeholder="{Editorial Label}" />
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-sm-3">
                @Html.LabelFor(model => model.structure_type_id)
            </div>

            <div class="col-sm-3">
                @Html.DropDownListFor(model => model.structure_type_id, new SelectList(Model.StructureTypes, "structure_type_id", "structure_type_label"), String.Empty, new { @data_bind = "value: structure_type_id", @class = "form-control" })
<span class="validationMessage" data-bind="validationMessage: structure_type_id"></span>
            </div>
        </div>

        
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.status)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.status, new SelectList(Model.Status, "status_id", "status_label"), new { @data_bind = "value: status", @class = "form-control"})
                </div>
</div>

        <!-- trade groups ------------------------------------->
        <fieldset class="tgroup">
            <legend class="trade_group">Group Information</legend>
            <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradegroups'>
                <li>
                    <div class="well col-xs-12" style="margin-bottom: 10px; padding-bottom: 0px; padding-top: 0px">
                        <div class="col-md-12">
                            <div class="row">
                                <h3><strong><span>Group </span><span data-bind='text: ($index() + 1)'></span><span> Information</span></strong></h3>
                            </div>
                            <div class="row">
                                <br />
                            </div>
                        </div>
                        <div class="row">
                            <div class="control-group col-md-3">
                                <div class="row col-md-12">
                                    <strong><span>Group Structure:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    @Html.DropDownListFor(x => x.trade_line_group_type_id, new SelectList(Model.TradeLineGroupTypes, "trade_line_group_type_id", "trade_line_group_type_label"), "{Structure}", new { @data_bind = "value: trade_line_group_type_id, selectedText: trade_line_group_type_string", @class="form-control" })
<span class="validationMessage" data-bind="validationMessage: trade_line_group_type_id"></span> 
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Editorial Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_editorial_label" placeholder="{Editorial Label}" />
                                </div>
                                <div class="row col-md-12">
                                    <strong><span>Canonical Label:</span></strong>
                                </div>
                                <div class="row col-md-12">
                                    <input class="form-control" type="text" data-bind="value: trade_line_group_label" placeholder="{Canonical Label}" disabled="disabled" />
                                </div>
                            </div>
                            <div class="form-group col-md-9">
                                <div class="well col-xs-12">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <h4><strong>Trade Line(s)</strong></h4>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <br />
                                    </div>
                                    <div class="row">
                                        <div class="col-md-1">
                                            <strong><span>Order:</span></strong>
                                        </div>
                                        <div class="col-md-4">
                                            <strong><span>Position:</span></strong>
                                        </div>
                                        <div class="col-md-7">
                                            <strong><span>Financial Instrument:</span></strong>
                                        </div>
                                    </div>
                                    <!-- Add a list of trade lines. -->
                                    <ul style="list-style: none; margin: 0px; padding: 0px;" data-bind='foreach: tradeLines'>
                                        <li>
                                            <div class="row">
                                                <div class="col-md-1 center-block">
                                                    

                                                        <label class="control-label" data-bind='text: ($index() + 1)'></label>
                                               
                                                </div>
                                                <div class="col-md-4">
                                                  <input class="" type="hidden" data-bind="uniqueIdPosition: position_id, value: position_id" class="tradeLinePosition"/>
<span class="validationMessage" data-bind="validationMessage: position_id"></span> 
                                                </div>
                                                <div class="col-md-6">
                                                    <input class="" type="hidden" data-bind="uniqueIdTradableThing: tradable_thing_id, value: tradable_thing_id" />
<span class="validationMessage" data-bind="validationMessage: tradable_thing_id"></span> 
                                                </div>
                                                <div class="col-md-1">
                                                    <button type="button" class="btn btn-sm btn-danger" data-bind='click: function () { $parent.removeLine($data); }'>
                                                        <span class="glyphicon glyphicon-remove-circle"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </li>
                                        
                                    </ul>
                                    <div class="row">
<div class="pull-left">
 <br />
                                <button data-bind='click: $root.removeGroup' class='btn btn-sm btn-danger'>Delete trade group</button>
                            </div>
                                            <div class="pull-right">
                                                <br />
                                                <button id="btnAddLine" data-bind='click: function () { addLine(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new trade line</button>
                                             </div>
                                    </div>
                                </div>
                                <!-- tradeline row -->
                            </div>
                            <!-- tradeline well -->
                            
                        </div>
                        <!-- group row -->
                    </div>
                    <!-- group well-->
                </li>
            </ul>
<div class="row">
    <div class="col-xs-3 pull-right">
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button id="btnAddGroup" data-bind='click: function () { addGroup(); typeAheadPosition(); typeAheadFinInstr(); }' class="btn btn-sm btn-info">Add new group</button>   
</div>
</div>

        </fieldset>
        <!-- instructions ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Instructions</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry)
                </div>
                <div class="col-sm-3">
                    <input type="text" class="form-control input-xlarge" data-bind="value: instruction_entry" />
<span class="validationMessage" data-bind="validationMessage: instruction_entry"></span>
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_entry_date)
                </div>
                <div class="col-sm-3">
                    <div class="input-append date" id="dpInstructionEntry" data-datepicker-format="YYYY-MM-DD">
                        <input class="span2" size="20" type="text" data-bind="value: instruction_entry_date", datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                        <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>  
                  <span class="validationMessage" data-bind="validationMessage: instruction_entry_date"></span>
                    </div>  
  </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit)
                </div>
                <div class="col-sm-3">
                    <input class="form-control input-xlarge" type="text" data-bind="value: instruction_exit" />
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_exit_date)
                </div>
 <div class="col-sm-3">
                <div class="input-append date" id="dpInstructionExit" data-date="" data-datepicker-format="YYYY-MM-DD">
<input class="span2" size="20" type="text" data-bind="value: instruction_exit_date", datepickerOptions: { format: 'YYYY-MM-DD', startDate: '1900-01-01', endDate: '2100-12-31' }">
                    <span class="add-on"><i class="glyphicon glyphicon-calendar"></i></span>
                    <span data-bind="visible: instructionDateCheck() == false" class="validationMessage">This field must be greater than instruction entry date.</span>
                </div>
</div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.instruction_type_id)
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.instruction_type_id, new SelectList(Model.InstructionTypes, "instruction_type_id", "instruction_type_label"), new { @data_bind = "value: instruction_type_id", @class = "form-control" })
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: instruction_label" />

                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.hedge_id)
                </div>

                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.hedge_id, new SelectList(Model.HedgeTypes, "hedge_id", "hedge_label"), new { @data_bind = "value: hedge_id", @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.currency_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="CurrencyTypeAhead" type="hidden" data-bind="value: currency_id" />
                </div>
            </div>

        </fieldset>

        <!-- supplementary info ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Supplementary Information</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.related_trade_ids)
                </div>
                 <div class="col-sm-6">
                      <input class="input-xlarge" id="selectRelatedTrades" type="hidden" data-bind="value: related_trade_ids_list" />
                </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-sm-3">
                        @Html.LabelFor(model => model.apl_func)
                    </div>
                    <div class="col-sm-7">
                        <input type="text" class="input-xlarge form-control" data-bind="value: apl_func" maxlength="255"/>
                    </div>
                </div>
        </fieldset>
        <!-- FX Spot and Carry ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">FX Spot and Carry</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.mark_to_mark_rate)
                </div>

                <div class="col-sm-3">
                    <input type="text" data-bind="value: mark_to_mark_rate" />
<span class="validationMessage" data-bind="validationMessage: mark_to_mark_rate"></span>  
                </div>
            </div>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.interest_rate_diff)
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: interest_rate_diff" />
<span class="validationMessage" data-bind="validationMessage: interest_rate_diff"></span> 
                </div>
            </div>
        </fieldset>

        <!-- Abs performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Absolute Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.abs_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.abs_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: abs_measure_type_id", @class = "form-control" })
                </div>
                <div class="col-sm-3" data-bind="visible: abs_measure_type_id() == 2">
                    <input class="input-xlarge" id="absCurrencyTypeAhead" type="hidden" data-bind="value: abs_currency_id" />
                </div>
                <div class="col-sm-3">
                    <input type="text" data-bind="value: abs_return_value" />
<span class="validationMessage" data-bind="validationMessage: abs_return_value"></span> 
                </div>
            </div>
        </fieldset>

        <!-- Rel performance ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Relative Performance</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.rel_measure_type_id)
                </div>

                <div class="col-sm-2">
                    @Html.DropDownListFor(model => model.rel_measure_type_id, new SelectList(Model.MeasureTypes, "measure_type_id", "measure_type_label"), new { @data_bind = "value: rel_measure_type_id", @class = "form-control" })
                </div>


                <div class="col-sm-3" data-bind="visible: rel_measure_type_id() == 2">

                    <input class="input-xlarge" id="relCurrencyTypeAhead" type="hidden" data-bind="value: rel_currency_id" />
                </div>


                <div class="col-sm-3">
                    <input type="text" data-bind="value: rel_return_value" />
<span class="validationMessage" data-bind="validationMessage: rel_return_value"></span> 
                </div>
            </div>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.return_benchmark_id)
                </div>

                <div class="col-sm-3">
                    <input class="input-xlarge" id="relBenchmarkTypeAhead" type="hidden" data-bind="value: return_benchmark_id" />
<span class="validationMessage" data-bind="validationMessage: return_benchmark_id"></span>
                </div>
            </div>
        </fieldset>

        <!-- Comments ------------------------------------- -->
        <fieldset class="tgroup">
            <legend class="trade_group">Trade Comments</legend>
            <div class="form-group">
                <div class="control-label col-sm-3">
                    @Html.LabelFor(model => model.comments)
                </div>

                <div class="col-sm-8">
                    @Html.TextAreaFor(model => model.comments, new { @data_bind = "value: comments", @class = "form-control", @rows="5", @cols="90"})
                </div>
            </div>
        </fieldset>
        <div class="pull-right">
            <button id="create" type="submit" class="btn btn-primary">Create</button>
            <a id="createUrl" href="@Html.AttributeEncode(Url.Action("Create", "Trade"))" style="display:none;"></a>
            <button name="ClientCancel" class="btn btn-primary" onclick=" window.onbeforeunload = null; document.location.href = $('#cancelUrl').attr('href');">Cancel</button>
            <a id="cancelUrl" href="@Html.AttributeEncode(Url.Action("Index", "Home"))" style="display:none;"></a>
        </div>

    </fieldset>
    </div>
</form>

<pre data-bind='text: ko.toJSON($root, null, 2), visible: debug'></pre>

@section scripts{
    <script src="~/Scripts/app/viewmodels/tradeViewModel.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        window.onbeforeunload = function () {
            return 'Are you sure you want to navigate away from this page?';
        };

        //init form custom controls
        $('#relativityId').val(2);
    
        //datetimepickers - moment-datetimepicker for bootstrap
        $('#dpInstructionEntry').datepicker(
                    {
                        width: '300px',
                        setDate: moment(new Date(), "YYYY-MM-DD")
                    });
        $('#dpInstructionExit').datepicker();

        //due to complexiity of nested knockout on tradeleines, all Financial Instruments will be loaded in the viewmodel from server.
        //TODO: Api call for searches on tradable things
        $(".tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '200px' });

        //select2.3.5 jquery control for typeaheads
        //to remotely get Benchmarks for typeaheads
        function format_benchmark(item) {
            return item.benchmark_label;
        }
        $("#BenchmarkTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Benchmark Selection}",
            width: '200px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteBenchmark",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.benchmark_id;
            },
            formatResult: format_benchmark,
            formatSelection: format_benchmark
        });
        $("#relBenchmarkTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Benchmark Selection}",
            width: '350px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteBenchmark",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.benchmark_id;
            },
            formatResult: format_benchmark,
            formatSelection: format_benchmark
        });
        //end typeAhead

        //to remotely get linked trades for typeaheads
        function format_trade(item) {
            return item.trade_editorial_label;
        }
        $("#selectRelatedTrades").select2({
            minimumInputLength: 1,
            placeholder: "{Linked Trades}",
            width: '490px',
            allowClear: true,
            multiple: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteLinkedTrades",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.trade_id;
            },
            formatResult: format_trade,
            formatSelection: format_trade
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        function format_currency(item) {
            return item.currency_label;
        }
        $("#CurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        $("#absCurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //to remotely get currencies for typeaheads
        $("#relCurrencyTypeAhead").select2({
            minimumInputLength: 1,
            placeholder: "{Currency Selection}",
            width: '200px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteCurrency",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.currency_id;
            },
            formatResult: format_currency,
            formatSelection: format_currency
        });
        //end typeAhead

        //Position Typeahead
        typeAheadPosition(); //default 2 is the relativity id default onload

        //confirm change of relatvity id
        $('#relativityId').on("focus", function (ev) {
            toastr.options.closeButton = true;
            toastr.options.positionClass = "toast-top-left";
            toastr.options.timeOut = 5000; // 5s
            toastr.warning('Changing "Benchmark" will clear all selected "Positions" in all Trade Lines on the form','WARNING');
        });

        //Financial Instrument for typeahead
        typeAheadFinInstr();

        

    });

    //to remotely get Financial Instrument for typeaheads
    function typeAheadFinInstr() {
        var newTradableThing = '#' + ko.bindingHandlers.uniqueIdTradableThing.prefix + ko.bindingHandlers.uniqueIdTradableThing.counter;
        $(newTradableThing).select2({
            minimumInputLength: 1,
            placeholder: "{Financial Instrument}",
            width: '275px',
            allowClear: true,
            ajax: {
                url: baseUrl + "Trade/AutoCompleteTradableThing",
                dataType: 'json',
                type: 'POST',
                data: function (term, page) {
                    return {
                        term: term, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.tradable_thing_id;
            },
            formatResult: function (item) {
                return item.tradable_thing_label;
            },
            formatSelection: function (item) {
                return item.tradable_thing_label;
            }
        });
    };

    //to remotely get positon for typeaheads
    function typeAheadPosition() {
        var newPosition = '#' + ko.bindingHandlers.uniqueIdPosition.prefix + ko.bindingHandlers.uniqueIdPosition.counter;
        $(newPosition).select2({
            minimumResultsForSearch: -1,
            placeholder: "{Position}",
            width: '175px',
            allowClear: false,
            ajax: {
                url: baseUrl + "Trade/AutoCompletePosition",
                dataType: 'json',
                type: 'POST',
                data: function () {
                    var relativityId = $('#relativityId').val();
                    if (relativityId == "" || relativityId == 'undefined')
                    {
                        relativityId = "0";
                    }
                    return {
                        relativityId: relativityId, //search term 
                    };
                },
                results: function (data, page) {
                    return {
                        results: data
                    };
                }
            },
            id: function (obj) {
                return obj.position_id;
            },
            formatResult: function (item) {
                return item.position_label;
            },
            formatSelection: function (item) {
                return item.position_label;
            },
            formatNoMatches: function () {
                return "Please select a Trade Benchmark";
            }
        });
        $('#relativityId').change(function () {
            $(newPosition).select2("val","").trigger("change");
        });
    };

    $('#btnAddGroup').click(function () {
        $("select.tradableThingList").select2({ placeholder: "{Financial Instrument}", width: '250px' });
    });

    //send save request to API            
    function saveTrade() {
        if (vm.saveTradeData() == true) {
            //alert('Trade successfully created');  
        }

    };

</script>
}
